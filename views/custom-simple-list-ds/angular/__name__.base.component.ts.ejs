<%# See generators/angular/generators/view/views/data-grid/__name__.base.component.ts.ejs for example %>
import { Component, Injector, ViewChild, OnInit, AfterViewInit, OnDestroy } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';

import { State } from '@progress/kendo-data-query';

import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { Observable } from 'rxjs/Observable';

import { KbGridComponent } from '../../../shared/components/grid/grid.component';
import { ModelDataResult } from '../../../core/data/model-data-result';

import { DataService } from '../../../core/data/data.service';
import { DataServiceFactory } from '../../../core/data/data-service-factory';
<%#- include('../../common/data-services/data-services-imports.ts.ejs', { viewDataSources }); -%>

@Component({
    <% if (useTemplateUrl) { %>templateUrl: './<%- dasherizedViewName %>.component.html'<% } else { %>template: require('./<%- dasherizedViewName %>.component.html')<% } %>,
    styleUrls: ['./<%- dasherizedViewName %>.component.css']
})
export class <%- classifiedViewName %>BaseComponent implements OnInit, AfterViewInit, OnDestroy {

    <%#- include('../../common/data-services/data-properties-definitions.ts.ejs', { viewDataSources }); -%>

    public $config: any = <%- viewConfig %>;

    // Here we need to create the properties we will access from the template
    // We access metadata properties from the view object
    public title: string = "<%- view.title %>";

    // Define some sample data
    public myList = [ { 'id': 1, 'name': 'test 1 (sample data from base.component.ts.ejs)' }
                    , { 'id': 2, 'name': 'test 2' }
                    ];

    // This one is defined from the augmented metadata model from index.js
    public myList4 = <%- pretty(view.myList4, undefined, undefined, true) %>;

    // For accessing real data from REST service:
    // Option 1: do everything by hand using Angular Http client service => need to create the url , ect... and then use Angular component/view binding (like tutorial)
    // Option 2: to use our data service.

    constructor(public injector: Injector) {
        <%#- include('../../common/data-services/data-properties-initialization.ts.ejs', { viewDataSources }); -%>
    }

    // we could include these but we just need one function that reads the data and not the 3 separate functions
    <%# - include('../../common/data-services/data-functions.ts.ejs'); -%>

<%#
    public read(dataSourceName): void {
    }

    public getDataChanges(dataSourceName): Observable<any[]> {
        const dataService = this.$dataServices[dataSourceName];
        return dataService.dataChanges().map(response => response ? response.data : []);
    }

    // http://reactivex.io/rxjs/manual/overview.html#behaviorsubject
    public getDataResult(dataSourceName): BehaviorSubject<ModelDataResult<any>> {
        return this.$dataServices[dataSourceName].dataChanges();
    }
%>

    public ngOnInit(): void {
        debugger;
        <%# We get data source name from metadata -> the name selected in property %>
        const dataSourceName = '<%- view.dataSource %>';
        console.log(`custom-simple-list-ds.component: dataSourceName: ${dataSourceName}`);
//        const dataService = this.$dataServices[dataSourceName];

        <%# use the KUIB builtin data service %>
/*        dataService.dataChanges()
            .do( result => console.log(`*** Result ${result}`) )
            .map(response => response ? response.data : []);

        dataService.read();
*/
    }

    public ngAfterViewInit(): void {
    }

    public ngOnDestroy(): void {
    }
}
